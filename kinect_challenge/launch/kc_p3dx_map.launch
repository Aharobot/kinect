<launch>    

  <arg name="HOME" default="$(env HOME)" />
  
  <!--  set one and only one of these true (1)-->
  <arg name="USE_FREENECT" default="false" />
  <arg name="USE_OPENNI"   default="true" />

  
  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find kinect)/urdf/p3dx_real.xacro'" />
		
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  



  <node pkg="tf" type="static_transform_publisher" name="static_transform_publisherx" args="0 0 0 0 0 0 base_link base_footprint 50"/>
  <node pkg="tf" type="static_transform_publisher" name="static_transform_publisher2" args="-0.2 0 0.036 0 0 0 base_link center_wheel 50"/>
  <node pkg="tf" type="static_transform_publisher" name="static_transform_publisher3" args="-0.178 0 0.052 0 0 0 base_link swivel 50"/>

  
<node pkg="rosaria" type="RosAria" name="RosAria" /> 

  <node pkg="topic_tools" type="relay" name="relay1" args="/RosAria/pose /odom" />
  <node pkg="topic_tools" type="relay" name="relay2" args="/smoothed_teleop_cmd_vel /RosAria/cmd_vel" />

   


   <include  if="$(arg USE_FREENECT)" file="$(find kinect_challenge)/launch/freenect.launch" >
        <arg name="depth_registration" value="true" />
   </include>
   
   <include  if="$(arg USE_OPENNI)" file="$(find openni_launch)/launch/openni.launch" >
        <arg name="depth_registration" value="true" />
   </include>

  <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
    <param name="scan_height" value="100"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth_registered/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>


  <group ns="rtabmap">
  
    <node name="rtabmap" pkg="rtabmap" type="rtabmap" output="screen" args="--delete_db_on_start">

     
          
          <param name="frame_id" type="string" value="base_link"/>
        
          <param name="subscribe_depth" type="bool" value="true"/>
          <param name="subscribe_laserScan" type="bool" value="true"/>
        
          <remap from="odom" to="/odom"/>
          <remap from="scan" to="/scan"/>

      	  <remap from="rgb/image" to="/camera/rgb/image_rect_color"/>
          <remap from="depth/image" to="/camera/depth_registered/image_raw"/>
      	  <remap from="rgb/camera_info" to="/camera/depth_registered/camera_info"/>
      
        
          <param name="queue_size" type="int" value="10"/>
        
          <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
          
          <!-- param name="config_path" type="str" value="$(find kinect_challenge)/config/rtabmap_config_map.ini"/ -->
          
          <param name="Rtabmap/DatabasePath" type="string" value="$(arg HOME)/.ros/rtabmap.db"/>  <!-- Database used for mapping -->
          
          <param name="Rtabmap/DetectionRate" type="string" value="3"/>            <!-- Don't need to do relocation very often! Though better results if the same rate as when mapping. -->
          
          <param name="Mem/STMSize" type="string" value="20"/>                     <!-- 20 location in short-term memory -->
          <param name="Mem/IncrementalMemory" type="string" value="true"/>         <!-- true = mapping mode-->
          
          <param name="RGBD/ScanMatchingSize" type="string" value="1"/>            <!-- Do odometry correction with consecutive laser scans -->
	      <param name="RGBD/LocalLoopDetectionSpace" type="string" value="false"/> <!-- Local loop closure detection (using estimated position) with locations in WM -->
	      <param name="RGBD/LocalLoopDetectionTime" type="string" value="true"/>   <!-- Local loop closure detection with locations in STM -->
          <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>    <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
 
	      <param name="LccIcp/Type" type="string" value="2"/>                      <!-- 0=No ICP, 1=ICP 3D, 2=ICP 2D -->
	      
	      <param name="LccBow/MaxDepth" type="string" value="0.0"/>                <!-- 3D visual words maximum depth 0=infinity -->
          <param name="LccBow/InlierDistance" type="string" value="0.1"/>          <!-- 3D visual words correspondence distance -->
          <param name="LccBow/MinInliers" type="string" value="10"/>               
          
          <param name="Odom/MinInliers" type="string" value="10"/>                 
	      
       
    </node>
    
    <node pkg="rtabmap" type="grid_map_assembler" name="grid_map_assembler" output="screen">
          <remap from="grid_map" to="/map"/>
          <param name="scan_voxel_size" type="str" value="0.01" />
    </node>
  </group>
      
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap)/launch/config/rgbd.rviz"/>
  

<!--  Change Teleop config if using different method or controller  -->
<!--   <include file="$(find turtlebot_teleop)/launch/ps3_teleop.launch" />  -->
       <include file="$(find p3dx_launch)/launch/xbox360_teleop.launch"  />
<!--   <include file="$(find kinect_challenge)/launch/ps3_teleop.launch" />  -->

  
  <node type="MSBMIOSvs.py" name = "MSBMIOSvs" pkg="kinect_challenge" output="screen">
  
    <!-- host IP address, IP address of PC running Microsoft Benchmark -->
    <!-- set to "sim" to simulate connection to the Microsoft app (always returns "OK") -->
    <param name="host_IP" type="str" value="sim" />
    
    <!-- port to talk to Microsoft Benchmark on -->
    <param name="host_port" type="int" value="7576" />
  
  </node>
  
  <node type="Mapper.py"    name = "Mapper"    pkg="kinect_challenge" output="screen">
  
    <param name="MapPath" type="str" value="$(find kinect_challenge)/maps" />
    
    <!-- Waypoints saved during mapping, file in maps folder -->
    <!-- any existing waypoint file is backed up to a file with time stamp appended to the name -->
    <param name="WaypointFile" type="str" value="waypoints.wp" />
    
    <!-- Button index for joystick button used to place a landmark -->
    <!--param name="lmButtonIdx"    type="int" value="1" /--> <!-- logitech "2" -->
    <param name="lmButtonIdx"    type="int" value="0" /> <!-- xbox "A" -->
    
    <!-- Button index for joystick button used to save current map -->
    <!-- map saved to map folder, file name = map_<timestamp>.[png|yaml] -->
    <!-- map  saved to map folder, file name = map.[png|yaml] -->
    <!-- param name="msButtonIdx"    type="int" value="0" /--> <!-- logitech "1" -->
    <param name="msButtonIdx"    type="int" value="2" /> <!-- xbox "X" -->
    
  </node>

  <node pkg="sound_play" name="soundplay" type="soundplay_node.py" />


</launch>
